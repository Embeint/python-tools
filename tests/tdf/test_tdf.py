import os

from infuse_iot.tdf import TDF

# assert "TOXTEMPDIR" in os.environ, "you must run these tests using tox"

TESTDATA_FILENAME = os.path.join(os.path.dirname(__file__), "tdf_example.bin")


def test_tdf():
    with open(TESTDATA_FILENAME, "rb") as f:
        test_data = f.read(-1)

    test_blocks = [test_data[i : (i + 512)] for i in range(0, len(test_data), 512)]

    decoder = TDF()
    total_tdfs = 0

    # Iterate over each block
    for block in test_blocks:
        assert len(block) % 512 == 0
        # Iterate over each TDF in the block
        for tdf in decoder.decode(block):
            assert isinstance(tdf, TDF.Reading)
            total_tdfs += 1

    # Number of TDFs on the example block should never change
    assert total_tdfs == 53


def test_buffers():
    # Valid buffers generated by `infuse-sdk/tests/subsys/tdf`
    hex_strings = [
        "6410040264003bdb31ccb6d508aa641004020a003bdb31ccb6d508aa",
        "a00f103bdb31ccb6d508aad2e1be87e47b88ae",
        "d0071d3bdb31ccb6d508aad2e1be87e47b88aeb19de6889efb2d975016f72831",
        "6410040210803bdb31ccb6d508aa6410040210803bdb31ccb6d508aa",
        "6400043bdb31cc64400440420f0000003bdb31cc",
        "6430040100003bdb31cc64700440420f0000000101003bdb31cc",
        "64400440420f0000003bdb31cc6400043bdb31cc",
        "64700440420f0000000100003bdb31cc6430040101003bdb31cc",
        "6410040696003bdb31ccb6d508aad2e1be87e47b88aeb19de6889efb2d97",
        "6e400440420f0000003bdb31cc6fc004a086013bdb31cc",
        "6e700440420f0000000100003bdb31cc6ff004a086010101003bdb31cc",
        "32400640420f0000003bdb31ccb6d537c004ffffff3bdb31cc",
        "32700640420f0000000100003bdb31ccb6d537f004ffffff0101003bdb31cc",
        "14400440420f0000003bdb31cc1340043f421000ffff3bdb31cc",
        "64400440420f0000003bdb31cc13400440420e0001003bdb31cc",
        "64400440420f0000003bdb31cc648004ffff3bdb31cc648004ffff3bdb31cc",
        "6400043bdb31cc6400043bdb31cc",
        "6430040100003bdb31cc6430040101003bdb31cc",
        "65400440420f0000003bdb31cc66800400003bdb31cc67800464003bdb31cc",
    ]
    decoder = TDF()

    for hex_string in hex_strings:
        total_tdfs = 0

        # Iterate over each TDF in the buffer (not necessarily valid definition matches)
        for tdf in decoder.decode(bytes.fromhex(hex_string), no_defs=True):
            assert isinstance(tdf, TDF.Reading)
            total_tdfs += 1
        assert total_tdfs > 0
