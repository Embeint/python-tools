#!/usr/bin/env python3
# mypy: ignore-errors
"""Autogenerated TDF decoding logic"""

import ctypes

from infuse_iot.generated.tdf_base import TdfReadingBase, TdfStructBase


class structs:
    class tdf_struct_mcuboot_img_sem_ver(TdfStructBase):
        """MCUboot semantic versioning struct"""

        _fields_ = [
            ("major", ctypes.c_uint8),
            ("minor", ctypes.c_uint8),
            ("revision", ctypes.c_uint16),
            ("build_num", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "major": "",
            "minor": "",
            "revision": "",
            "build_num": "",
        }
        _display_fmt_ = {
            "major": "{}",
            "minor": "{}",
            "revision": "{}",
            "build_num": "0x{:08x}",
        }

    class tdf_struct_xyz_16bit(TdfStructBase):
        """Generic 3-axis sensor reading"""

        _fields_ = [
            ("x", ctypes.c_int16),
            ("y", ctypes.c_int16),
            ("z", ctypes.c_int16),
        ]
        _pack_ = 1
        _postfix_ = {
            "x": "",
            "y": "",
            "z": "",
        }
        _display_fmt_ = {
            "x": "{}",
            "y": "{}",
            "z": "{}",
        }

    class tdf_struct_gcs_location(TdfStructBase):
        """Geographic Coordinate System location"""

        _fields_ = [
            ("_latitude", ctypes.c_int32),
            ("_longitude", ctypes.c_int32),
            ("_height", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "latitude": "deg",
            "longitude": "deg",
            "height": "m",
        }
        _display_fmt_ = {
            "latitude": "{:.5f}",
            "longitude": "{:.5f}",
            "height": "{:.3f}",
        }

        @property
        def latitude(self):
            return self._latitude * 1e-07

        @property
        def longitude(self):
            return self._longitude * 1e-07

        @property
        def height(self):
            return self._height * 0.001

    class tdf_struct_lte_cell_id_local(TdfStructBase):
        """LTE cell ID (Local)"""

        _fields_ = [
            ("eci", ctypes.c_uint32),
            ("tac", ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            "eci": "",
            "tac": "",
        }
        _display_fmt_ = {
            "eci": "{}",
            "tac": "{}",
        }

    class tdf_struct_lte_cell_id_global(TdfStructBase):
        """LTE cell ID (Global)"""

        _fields_ = [
            ("mcc", ctypes.c_uint16),
            ("mnc", ctypes.c_uint16),
            ("eci", ctypes.c_uint32),
            ("tac", ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            "mcc": "",
            "mnc": "",
            "eci": "",
            "tac": "",
        }
        _display_fmt_ = {
            "mcc": "{}",
            "mnc": "{}",
            "eci": "{}",
            "tac": "{}",
        }

    class tdf_struct_lte_cell_neighbour(TdfStructBase):
        """LTE cell ID (Global)"""

        _fields_ = [
            ("earfcn", ctypes.c_uint32),
            ("pci", ctypes.c_uint16),
            ("_time_diff", ctypes.c_uint16),
            ("_rsrp", ctypes.c_uint8),
            ("rsrq", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "earfcn": "",
            "pci": "",
            "time_diff": "s",
            "rsrp": "dBm",
            "rsrq": "dB",
        }
        _display_fmt_ = {
            "earfcn": "{}",
            "pci": "{}",
            "time_diff": "{}",
            "rsrp": "{}",
            "rsrq": "{}",
        }

        @property
        def time_diff(self):
            return self._time_diff * 0.001

        @property
        def rsrp(self):
            return self._rsrp * -1

    class tdf_struct_bt_addr_le(TdfStructBase):
        """Bluetooth address type (bt_addr_le_t)"""

        _fields_ = [
            ("type", ctypes.c_uint8),
            ("_val", 6 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "type": "",
            "val": "",
        }
        _display_fmt_ = {
            "type": "{}",
            "val": "0x{:012x}",
        }

        @property
        def val(self):
            return int.from_bytes(self._val, byteorder="little")

    class tdf_struct_eui48(TdfStructBase):
        """IEEE EUI-48 address"""

        _fields_ = [
            ("_val", 6 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "val": "",
        }
        _display_fmt_ = {
            "val": "0x{:012x}",
        }

        @property
        def val(self):
            return int.from_bytes(self._val, byteorder="little")


class readings:
    class announce(TdfReadingBase):
        """Common announcement packet"""

        name = "ANNOUNCE"
        _fields_ = [
            ("application", ctypes.c_uint32),
            ("version", structs.tdf_struct_mcuboot_img_sem_ver),
            ("kv_crc", ctypes.c_uint32),
            ("blocks", ctypes.c_uint32),
            ("uptime", ctypes.c_uint32),
            ("reboots", ctypes.c_uint16),
            ("flags", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "application": "",
            "version": "",
            "kv_crc": "",
            "blocks": "",
            "uptime": "",
            "reboots": "",
            "flags": "",
        }
        _display_fmt_ = {
            "application": "0x{:08x}",
            "version": "{}",
            "kv_crc": "0x{:08x}",
            "blocks": "{}",
            "uptime": "{}",
            "reboots": "{}",
            "flags": "0x{:02x}",
        }

    class battery_state(TdfReadingBase):
        """General battery state"""

        name = "BATTERY_STATE"
        _fields_ = [
            ("voltage_mv", ctypes.c_uint32),
            ("current_ua", ctypes.c_int32),
            ("soc", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "voltage_mv": "mV",
            "current_ua": "uA",
            "soc": "%",
        }
        _display_fmt_ = {
            "voltage_mv": "{}",
            "current_ua": "{}",
            "soc": "{}",
        }

    class ambient_temp_pres_hum(TdfReadingBase):
        """Ambient temperature, pressure & humidity"""

        name = "AMBIENT_TEMP_PRES_HUM"
        _fields_ = [
            ("_temperature", ctypes.c_int32),
            ("_pressure", ctypes.c_uint32),
            ("_humidity", ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            "temperature": "deg",
            "pressure": "kPA",
            "humidity": "%",
        }
        _display_fmt_ = {
            "temperature": "{:.3f}",
            "pressure": "{:.3f}",
            "humidity": "{:.2f}",
        }

        @property
        def temperature(self):
            return self._temperature * 0.001

        @property
        def pressure(self):
            return self._pressure * 0.001

        @property
        def humidity(self):
            return self._humidity * 0.01

    class ambient_temperature(TdfReadingBase):
        """Ambient temperature"""

        name = "AMBIENT_TEMPERATURE"
        _fields_ = [
            ("_temperature", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "temperature": "deg",
        }
        _display_fmt_ = {
            "temperature": "{:.3f}",
        }

        @property
        def temperature(self):
            return self._temperature * 0.001

    class time_sync(TdfReadingBase):
        """Time synchronised to new source"""

        name = "TIME_SYNC"
        _fields_ = [
            ("source", ctypes.c_uint8),
            ("_shift", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "source": "",
            "shift": "us",
        }
        _display_fmt_ = {
            "source": "{}",
            "shift": "{}",
        }

        @property
        def shift(self):
            return self._shift * 1e-06

    class reboot_info(TdfReadingBase):
        """Information pertaining to the previous reboot"""

        name = "REBOOT_INFO"
        _fields_ = [
            ("reason", ctypes.c_uint8),
            ("hardware_flags", ctypes.c_uint32),
            ("count", ctypes.c_uint32),
            ("uptime", ctypes.c_uint32),
            ("param_1", ctypes.c_uint32),
            ("param_2", ctypes.c_uint32),
            ("thread", 8 * ctypes.c_char),
        ]
        _pack_ = 1
        _postfix_ = {
            "reason": "",
            "hardware_flags": "",
            "count": "",
            "uptime": "",
            "param_1": "",
            "param_2": "",
            "thread": "",
        }
        _display_fmt_ = {
            "reason": "{}",
            "hardware_flags": "0x{:08x}",
            "count": "{}",
            "uptime": "{}",
            "param_1": "0x{:08x}",
            "param_2": "0x{:08x}",
            "thread": "{}",
        }

    class acc_2g(TdfReadingBase):
        """Accelerometer +-2G"""

        name = "ACC_2G"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class acc_4g(TdfReadingBase):
        """Accelerometer +-4G"""

        name = "ACC_4G"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class acc_8g(TdfReadingBase):
        """Accelerometer +-8G"""

        name = "ACC_8G"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class acc_16g(TdfReadingBase):
        """Accelerometer +-16G"""

        name = "ACC_16G"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gyr_125dps(TdfReadingBase):
        """Gyroscope +-125 DPS"""

        name = "GYR_125DPS"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gyr_250dps(TdfReadingBase):
        """Gyroscope +-250 DPS"""

        name = "GYR_250DPS"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gyr_500dps(TdfReadingBase):
        """Gyroscope +-500 DPS"""

        name = "GYR_500DPS"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gyr_1000dps(TdfReadingBase):
        """Gyroscope +-1000 DPS"""

        name = "GYR_1000DPS"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gyr_2000dps(TdfReadingBase):
        """Gyroscope +-2000 DPS"""

        name = "GYR_2000DPS"
        _fields_ = [
            ("sample", structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            "sample": "",
        }
        _display_fmt_ = {
            "sample": "{}",
        }

    class gcs_wgs84_llha(TdfReadingBase):
        """Geo-location (WGS-84) + accuracy"""

        name = "GCS_WGS84_LLHA"
        _fields_ = [
            ("location", structs.tdf_struct_gcs_location),
            ("_h_acc", ctypes.c_int32),
            ("_v_acc", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "location": "",
            "h_acc": "m",
            "v_acc": "m",
        }
        _display_fmt_ = {
            "location": "{}",
            "h_acc": "{:.3f}",
            "v_acc": "{:.3f}",
        }

        @property
        def h_acc(self):
            return self._h_acc * 0.001

        @property
        def v_acc(self):
            return self._v_acc * 0.001

    class ubx_nav_pvt(TdfReadingBase):
        """u-blox GNSS NAV-PVT message"""

        name = "UBX_NAV_PVT"
        _fields_ = [
            ("itow", ctypes.c_uint32),
            ("year", ctypes.c_uint16),
            ("month", ctypes.c_uint8),
            ("day", ctypes.c_uint8),
            ("hour", ctypes.c_uint8),
            ("min", ctypes.c_uint8),
            ("sec", ctypes.c_uint8),
            ("valid", ctypes.c_uint8),
            ("t_acc", ctypes.c_uint32),
            ("nano", ctypes.c_int32),
            ("fix_type", ctypes.c_uint8),
            ("flags", ctypes.c_uint8),
            ("flags2", ctypes.c_uint8),
            ("num_sv", ctypes.c_uint8),
            ("_lon", ctypes.c_int32),
            ("_lat", ctypes.c_int32),
            ("_height", ctypes.c_int32),
            ("_h_msl", ctypes.c_int32),
            ("_h_acc", ctypes.c_uint32),
            ("_v_acc", ctypes.c_uint32),
            ("_vel_n", ctypes.c_int32),
            ("_vel_e", ctypes.c_int32),
            ("_vel_d", ctypes.c_int32),
            ("_g_speed", ctypes.c_int32),
            ("_head_mot", ctypes.c_int32),
            ("_s_acc", ctypes.c_uint32),
            ("_head_acc", ctypes.c_uint32),
            ("_p_dop", ctypes.c_uint16),
            ("flags3", ctypes.c_uint16),
            ("reserved0", 4 * ctypes.c_uint8),
            ("_head_veh", ctypes.c_int32),
            ("_mag_dec", ctypes.c_int16),
            ("_mag_acc", ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            "itow": "",
            "year": "",
            "month": "",
            "day": "",
            "hour": "",
            "min": "",
            "sec": "",
            "valid": "",
            "t_acc": "ns",
            "nano": "ns",
            "fix_type": "",
            "flags": "",
            "flags2": "",
            "num_sv": "",
            "lon": "deg",
            "lat": "deg",
            "height": "m",
            "h_msl": "m",
            "h_acc": "m",
            "v_acc": "m",
            "vel_n": "m/s",
            "vel_e": "m/s",
            "vel_d": "m/s",
            "g_speed": "m/s",
            "head_mot": "deg",
            "s_acc": "m/s",
            "head_acc": "deg",
            "p_dop": "",
            "flags3": "",
            "reserved0": "",
            "head_veh": "deg",
            "mag_dec": "deg",
            "mag_acc": "deg",
        }
        _display_fmt_ = {
            "itow": "{}",
            "year": "{}",
            "month": "{}",
            "day": "{}",
            "hour": "{}",
            "min": "{}",
            "sec": "{}",
            "valid": "0x{:02x}",
            "t_acc": "{}",
            "nano": "{}",
            "fix_type": "{}",
            "flags": "0x{:02x}",
            "flags2": "0x{:02x}",
            "num_sv": "{}",
            "lon": "{}",
            "lat": "{}",
            "height": "{}",
            "h_msl": "{}",
            "h_acc": "{}",
            "v_acc": "{}",
            "vel_n": "{}",
            "vel_e": "{}",
            "vel_d": "{}",
            "g_speed": "{}",
            "head_mot": "{}",
            "s_acc": "{}",
            "head_acc": "{}",
            "p_dop": "{}",
            "flags3": "0x{:04x}",
            "reserved0": "{}",
            "head_veh": "{}",
            "mag_dec": "{}",
            "mag_acc": "{}",
        }

        @property
        def lon(self):
            return self._lon * 1e-07

        @property
        def lat(self):
            return self._lat * 1e-07

        @property
        def height(self):
            return self._height * 0.001

        @property
        def h_msl(self):
            return self._h_msl * 0.001

        @property
        def h_acc(self):
            return self._h_acc * 0.001

        @property
        def v_acc(self):
            return self._v_acc * 0.001

        @property
        def vel_n(self):
            return self._vel_n * 0.001

        @property
        def vel_e(self):
            return self._vel_e * 0.001

        @property
        def vel_d(self):
            return self._vel_d * 0.001

        @property
        def g_speed(self):
            return self._g_speed * 0.001

        @property
        def head_mot(self):
            return self._head_mot * 1e-05

        @property
        def s_acc(self):
            return self._s_acc * 0.001

        @property
        def head_acc(self):
            return self._head_acc * 1e-05

        @property
        def p_dop(self):
            return self._p_dop * 0.01

        @property
        def head_veh(self):
            return self._head_veh * 1e-05

        @property
        def mag_dec(self):
            return self._mag_dec * 0.01

        @property
        def mag_acc(self):
            return self._mag_acc * 0.01

    class lte_conn_status(TdfReadingBase):
        """Information on service cell and registration status"""

        name = "LTE_CONN_STATUS"
        _fields_ = [
            ("cell", structs.tdf_struct_lte_cell_id_global),
            ("earfcn", ctypes.c_uint32),
            ("status", ctypes.c_uint8),
            ("tech", ctypes.c_uint8),
            ("_rsrp", ctypes.c_uint8),
            ("rsrq", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "cell": "",
            "earfcn": "",
            "status": "",
            "tech": "",
            "rsrp": "dBm",
            "rsrq": "dB",
        }
        _display_fmt_ = {
            "cell": "{}",
            "earfcn": "{}",
            "status": "{}",
            "tech": "{}",
            "rsrp": "{}",
            "rsrq": "{}",
        }

        @property
        def rsrp(self):
            return self._rsrp * -1

    class globalstar_pkt(TdfReadingBase):
        """9 byte payload transmitted over the Globalstar Simplex network"""

        name = "GLOBALSTAR_PKT"
        _fields_ = [
            ("payload", 9 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "payload": "",
        }
        _display_fmt_ = {
            "payload": "{}",
        }

    class acc_magnitude_std_dev(TdfReadingBase):
        """Accelerometer magnitude standard deviation over a window"""

        name = "ACC_MAGNITUDE_STD_DEV"
        _fields_ = [
            ("count", ctypes.c_uint32),
            ("std_dev", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "count": "",
            "std_dev": "",
        }
        _display_fmt_ = {
            "count": "{}",
            "std_dev": "{}",
        }

    class activity_metric(TdfReadingBase):
        """Generic activity metric"""

        name = "ACTIVITY_METRIC"
        _fields_ = [
            ("value", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "value": "",
        }
        _display_fmt_ = {
            "value": "{}",
        }

    class algorithm_output(TdfReadingBase):
        """Instantaneous algorithm output"""

        name = "ALGORITHM_OUTPUT"
        _fields_ = [
            ("algorithm_id", ctypes.c_uint32),
            ("algorithm_version", ctypes.c_uint16),
            ("output", 0 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "algorithm_id": "",
            "algorithm_version": "",
            "output": "",
        }
        _display_fmt_ = {
            "algorithm_id": "0x{:08x}",
            "algorithm_version": "{}",
            "output": "{}",
        }

    class runtime_error(TdfReadingBase):
        """Runtime error logging"""

        name = "RUNTIME_ERROR"
        _fields_ = [
            ("error_id", ctypes.c_uint32),
            ("error_ctx", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "error_id": "",
            "error_ctx": "",
        }
        _display_fmt_ = {
            "error_id": "{}",
            "error_ctx": "{}",
        }

    class charger_en_control(TdfReadingBase):
        """Battery charging enable state"""

        name = "CHARGER_EN_CONTROL"
        _fields_ = [
            ("enabled", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "enabled": "",
        }
        _display_fmt_ = {
            "enabled": "{}",
        }

    class gnss_fix_info(TdfReadingBase):
        """Metadata about a GNSS location fix"""

        name = "GNSS_FIX_INFO"
        _fields_ = [
            ("time_fix", ctypes.c_uint16),
            ("location_fix", ctypes.c_uint16),
            ("num_sv", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "time_fix": "",
            "location_fix": "",
            "num_sv": "",
        }
        _display_fmt_ = {
            "time_fix": "{}",
            "location_fix": "{}",
            "num_sv": "{}",
        }

    class bluetooth_connection(TdfReadingBase):
        """Bluetooth connection state change"""

        name = "BLUETOOTH_CONNECTION"
        _fields_ = [
            ("address", structs.tdf_struct_bt_addr_le),
            ("connected", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "address": "",
            "connected": "",
        }
        _display_fmt_ = {
            "address": "{}",
            "connected": "{}",
        }

    class bluetooth_rssi(TdfReadingBase):
        """Received signal strength of Bluetooth device"""

        name = "BLUETOOTH_RSSI"
        _fields_ = [
            ("address", structs.tdf_struct_bt_addr_le),
            ("rssi", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "address": "",
            "rssi": "dBm",
        }
        _display_fmt_ = {
            "address": "{}",
            "rssi": "{}",
        }

    class bluetooth_data_throughput(TdfReadingBase):
        """Data throughput of Bluetooth link"""

        name = "BLUETOOTH_DATA_THROUGHPUT"
        _fields_ = [
            ("address", structs.tdf_struct_bt_addr_le),
            ("throughput", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "address": "",
            "throughput": "B/sec",
        }
        _display_fmt_ = {
            "address": "{}",
            "throughput": "{}",
        }

    class algorithm_class_histogram(TdfReadingBase):
        """Algorithm output class histogram over a time window"""

        name = "ALGORITHM_CLASS_HISTOGRAM"
        _fields_ = [
            ("algorithm_id", ctypes.c_uint32),
            ("algorithm_version", ctypes.c_uint16),
            ("classes", 0 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "algorithm_id": "",
            "algorithm_version": "",
            "classes": "",
        }
        _display_fmt_ = {
            "algorithm_id": "0x{:08x}",
            "algorithm_version": "{}",
            "classes": "{}",
        }

    class algorithm_class_time_series(TdfReadingBase):
        """Algorithm output class time series vector"""

        name = "ALGORITHM_CLASS_TIME_SERIES"
        _fields_ = [
            ("algorithm_id", ctypes.c_uint32),
            ("algorithm_version", ctypes.c_uint16),
            ("values", 0 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "algorithm_id": "",
            "algorithm_version": "",
            "values": "",
        }
        _display_fmt_ = {
            "algorithm_id": "0x{:08x}",
            "algorithm_version": "{}",
            "values": "{}",
        }

    class lte_tac_cells(TdfReadingBase):
        """Information on cells in a tracking area"""

        name = "LTE_TAC_CELLS"
        _fields_ = [
            ("cell", structs.tdf_struct_lte_cell_id_global),
            ("earfcn", ctypes.c_uint32),
            ("_rsrp", ctypes.c_uint8),
            ("rsrq", ctypes.c_int8),
            ("neighbours", 0 * structs.tdf_struct_lte_cell_neighbour),
        ]
        _pack_ = 1
        _postfix_ = {
            "cell": "",
            "earfcn": "",
            "rsrp": "dBm",
            "rsrq": "dB",
            "neighbours": "",
        }
        _display_fmt_ = {
            "cell": "{}",
            "earfcn": "{}",
            "rsrp": "{}",
            "rsrq": "{}",
            "neighbours": "{}",
        }

        @property
        def rsrp(self):
            return self._rsrp * -1

    class wifi_ap_info(TdfReadingBase):
        """Wi-Fi access point information"""

        name = "WIFI_AP_INFO"
        _fields_ = [
            ("bssid", structs.tdf_struct_eui48),
            ("channel", ctypes.c_uint8),
            ("rsrp", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "bssid": "",
            "channel": "",
            "rsrp": "",
        }
        _display_fmt_ = {
            "bssid": "{}",
            "channel": "{}",
            "rsrp": "{}",
        }

    class device_tilt(TdfReadingBase):
        """Tilt angle of the device"""

        name = "DEVICE_TILT"
        _fields_ = [
            ("cosine", ctypes.c_float),
        ]
        _pack_ = 1
        _postfix_ = {
            "cosine": "",
        }
        _display_fmt_ = {
            "cosine": "{:.6f}",
        }

    class nrf9x_gnss_pvt(TdfReadingBase):
        """nRF9x GNSS PVT data frame"""

        name = "NRF9X_GNSS_PVT"
        _fields_ = [
            ("_lat", ctypes.c_int32),
            ("_lon", ctypes.c_int32),
            ("_height", ctypes.c_int32),
            ("_h_acc", ctypes.c_uint32),
            ("_v_acc", ctypes.c_uint32),
            ("_h_speed", ctypes.c_int32),
            ("_h_speed_acc", ctypes.c_uint32),
            ("_v_speed", ctypes.c_int32),
            ("_v_speed_acc", ctypes.c_uint32),
            ("_head_mot", ctypes.c_int32),
            ("_head_acc", ctypes.c_uint32),
            ("year", ctypes.c_uint16),
            ("month", ctypes.c_uint8),
            ("day", ctypes.c_uint8),
            ("hour", ctypes.c_uint8),
            ("min", ctypes.c_uint8),
            ("sec", ctypes.c_uint8),
            ("ms", ctypes.c_uint16),
            ("_p_dop", ctypes.c_uint16),
            ("_h_dop", ctypes.c_uint16),
            ("_v_dop", ctypes.c_uint16),
            ("_t_dop", ctypes.c_uint16),
            ("flags", ctypes.c_uint8),
            ("num_sv", ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "lat": "deg",
            "lon": "deg",
            "height": "m",
            "h_acc": "m",
            "v_acc": "m",
            "h_speed": "m/s",
            "h_speed_acc": "m/s",
            "v_speed": "m/s",
            "v_speed_acc": "m/s",
            "head_mot": "deg",
            "head_acc": "deg",
            "year": "",
            "month": "",
            "day": "",
            "hour": "",
            "min": "",
            "sec": "",
            "ms": "",
            "p_dop": "",
            "h_dop": "",
            "v_dop": "",
            "t_dop": "",
            "flags": "",
            "num_sv": "",
        }
        _display_fmt_ = {
            "lat": "{}",
            "lon": "{}",
            "height": "{}",
            "h_acc": "{}",
            "v_acc": "{}",
            "h_speed": "{}",
            "h_speed_acc": "{}",
            "v_speed": "{}",
            "v_speed_acc": "{}",
            "head_mot": "{}",
            "head_acc": "{}",
            "year": "{}",
            "month": "{}",
            "day": "{}",
            "hour": "{}",
            "min": "{}",
            "sec": "{}",
            "ms": "{}",
            "p_dop": "{}",
            "h_dop": "{}",
            "v_dop": "{}",
            "t_dop": "{}",
            "flags": "0x{:02x}",
            "num_sv": "{}",
        }

        @property
        def lat(self):
            return self._lat * 1e-07

        @property
        def lon(self):
            return self._lon * 1e-07

        @property
        def height(self):
            return self._height * 0.001

        @property
        def h_acc(self):
            return self._h_acc * 0.001

        @property
        def v_acc(self):
            return self._v_acc * 0.001

        @property
        def h_speed(self):
            return self._h_speed * 0.001

        @property
        def h_speed_acc(self):
            return self._h_speed_acc * 0.001

        @property
        def v_speed(self):
            return self._v_speed * 0.001

        @property
        def v_speed_acc(self):
            return self._v_speed_acc * 0.001

        @property
        def head_mot(self):
            return self._head_mot * 1e-05

        @property
        def head_acc(self):
            return self._head_acc * 1e-05

        @property
        def p_dop(self):
            return self._p_dop * 0.01

        @property
        def h_dop(self):
            return self._h_dop * 0.01

        @property
        def v_dop(self):
            return self._v_dop * 0.01

        @property
        def t_dop(self):
            return self._t_dop * 0.01

    class battery_charge_accumulated(TdfReadingBase):
        """Battery charge accumulated over time (+ve entering battery, -ve exiting battery)"""

        name = "BATTERY_CHARGE_ACCUMULATED"
        _fields_ = [
            ("charge", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "charge": "uAs",
        }
        _display_fmt_ = {
            "charge": "{}",
        }

    class infuse_bluetooth_rssi(TdfReadingBase):
        """Received signal strength of Infuse-IoT Bluetooth device"""

        name = "INFUSE_BLUETOOTH_RSSI"
        _fields_ = [
            ("infuse_id", ctypes.c_uint64),
            ("rssi", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "infuse_id": "",
            "rssi": "dBm",
        }
        _display_fmt_ = {
            "infuse_id": "{}",
            "rssi": "{}",
        }

    class adc_raw_8(TdfReadingBase):
        """Generic 8bit raw ADC reading"""

        name = "ADC_RAW_8"
        _fields_ = [
            ("val", ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            "val": "",
        }
        _display_fmt_ = {
            "val": "{}",
        }

    class adc_raw_16(TdfReadingBase):
        """Generic 16bit raw ADC reading"""

        name = "ADC_RAW_16"
        _fields_ = [
            ("val", ctypes.c_int16),
        ]
        _pack_ = 1
        _postfix_ = {
            "val": "",
        }
        _display_fmt_ = {
            "val": "{}",
        }

    class adc_raw_32(TdfReadingBase):
        """Generic 32bit raw ADC reading"""

        name = "ADC_RAW_32"
        _fields_ = [
            ("val", ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            "val": "",
        }
        _display_fmt_ = {
            "val": "{}",
        }

    class annotation(TdfReadingBase):
        """Generic event annotation"""

        name = "ANNOTATION"
        _fields_ = [
            ("timestamp", ctypes.c_uint32),
            ("event", 0 * ctypes.c_char),
        ]
        _pack_ = 1
        _postfix_ = {
            "timestamp": "",
            "event": "",
        }
        _display_fmt_ = {
            "timestamp": "{}",
            "event": "{}",
        }

    class lora_rx(TdfReadingBase):
        """Received LoRa packet"""

        name = "LORA_RX"
        _fields_ = [
            ("snr", ctypes.c_int8),
            ("rssi", ctypes.c_int16),
            ("payload", 0 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "snr": "",
            "rssi": "",
            "payload": "",
        }
        _display_fmt_ = {
            "snr": "{}",
            "rssi": "{}",
            "payload": "{}",
        }

    class lora_tx(TdfReadingBase):
        """Transmitted LoRa packet"""

        name = "LORA_TX"
        _fields_ = [
            ("payload", 0 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "payload": "",
        }
        _display_fmt_ = {
            "payload": "{}",
        }

    class idx_array_freq(TdfReadingBase):
        """Sample frequency metadata for a TDF_DATA_FORMAT_IDX_ARRAY array"""

        name = "IDX_ARRAY_FREQ"
        _fields_ = [
            ("tdf_id", ctypes.c_uint16),
            ("frequency", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "tdf_id": "",
            "frequency": "",
        }
        _display_fmt_ = {
            "tdf_id": "{}",
            "frequency": "{}",
        }

    class idx_array_period(TdfReadingBase):
        """Sample frequency metadata for a TDF_DATA_FORMAT_IDX_ARRAY array"""

        name = "IDX_ARRAY_PERIOD"
        _fields_ = [
            ("tdf_id", ctypes.c_uint16),
            ("period", ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            "tdf_id": "",
            "period": "",
        }
        _display_fmt_ = {
            "tdf_id": "{}",
            "period": "{}",
        }

    class array_type(TdfReadingBase):
        """Example array type"""

        name = "ARRAY_TYPE"
        _fields_ = [
            ("array", 4 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            "array": "",
        }
        _display_fmt_ = {
            "array": "{}",
        }


id_type_mapping: dict[int, type[TdfReadingBase]] = {
    1: readings.announce,
    2: readings.battery_state,
    3: readings.ambient_temp_pres_hum,
    4: readings.ambient_temperature,
    5: readings.time_sync,
    6: readings.reboot_info,
    10: readings.acc_2g,
    11: readings.acc_4g,
    12: readings.acc_8g,
    13: readings.acc_16g,
    14: readings.gyr_125dps,
    15: readings.gyr_250dps,
    16: readings.gyr_500dps,
    17: readings.gyr_1000dps,
    18: readings.gyr_2000dps,
    19: readings.gcs_wgs84_llha,
    20: readings.ubx_nav_pvt,
    21: readings.lte_conn_status,
    22: readings.globalstar_pkt,
    23: readings.acc_magnitude_std_dev,
    24: readings.activity_metric,
    25: readings.algorithm_output,
    26: readings.runtime_error,
    27: readings.charger_en_control,
    28: readings.gnss_fix_info,
    29: readings.bluetooth_connection,
    30: readings.bluetooth_rssi,
    31: readings.bluetooth_data_throughput,
    32: readings.algorithm_class_histogram,
    33: readings.algorithm_class_time_series,
    34: readings.lte_tac_cells,
    35: readings.wifi_ap_info,
    36: readings.device_tilt,
    37: readings.nrf9x_gnss_pvt,
    38: readings.battery_charge_accumulated,
    39: readings.infuse_bluetooth_rssi,
    40: readings.adc_raw_8,
    41: readings.adc_raw_16,
    42: readings.adc_raw_32,
    43: readings.annotation,
    44: readings.lora_rx,
    45: readings.lora_tx,
    46: readings.idx_array_freq,
    47: readings.idx_array_period,
    100: readings.array_type,
}
