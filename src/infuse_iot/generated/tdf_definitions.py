#!/usr/bin/env python3

"""Autogenerated TDF decoding logic"""

import ctypes

class structs:
    class _struct_type(ctypes.LittleEndianStructure):
        def iter_fields(self):
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                yield f_name, val

    class tdf_struct_mcuboot_img_sem_ver(_struct_type):
        """MCUboot semantic versioning struct"""
        _fields_ = [
	        ('major', ctypes.c_uint8),
	        ('minor', ctypes.c_uint8),
	        ('revision', ctypes.c_uint16),
	        ('build_num', ctypes.c_uint32),
        ]
        _pack_ = 1

    class tdf_struct_xyz_16bit(_struct_type):
        """Generic 3-axis sensor reading"""
        _fields_ = [
	        ('x', ctypes.c_int16),
	        ('y', ctypes.c_int16),
	        ('z', ctypes.c_int16),
        ]
        _pack_ = 1

class readings:
    class _reading_type(ctypes.LittleEndianStructure):
        def iter_fields(self):
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                if isinstance(val, ctypes.LittleEndianStructure):
                    for subfield_name, subfield_val in val.iter_fields():
                        yield f'{f_name}.{subfield_name}', subfield_val, ''
                else:
                    yield f_name, val, self._postfix_[f_name]

    class announce(_reading_type):
        """Common announcement packet"""
        name = "ANNOUNCE"
        _fields_ = [
	        ('application', ctypes.c_uint32),
	        ('version', structs.tdf_struct_mcuboot_img_sem_ver),
	        ('kv_crc', ctypes.c_uint32),
	        ('uptime', ctypes.c_uint32),
	        ('reboots', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
	        'application': '',
	        'version': '',
	        'kv_crc': '',
	        'uptime': '',
	        'reboots': '',
        }

    class battery_state(_reading_type):
        """General battery state"""
        name = "BATTERY_STATE"
        _fields_ = [
	        ('voltage_mv', ctypes.c_uint32),
	        ('charge_ua', ctypes.c_uint16),
	        ('_soc', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
	        'voltage_mv': 'mV',
	        'charge_ua': 'uA',
	        'soc': '%',
        }

        @property
        def soc(self):
            return self._soc * 0.01

    class environmental(_reading_type):
        """General battery state"""
        name = "ENVIRONMENTAL"
        _fields_ = [
	        ('_temperature', ctypes.c_int32),
	        ('_pressure', ctypes.c_uint32),
	        ('_humidity', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
	        'temperature': 'deg',
	        'pressure': 'kPa',
	        'humidity': '%',
        }

        @property
        def temperature(self):
            return self._temperature * 0.001

        @property
        def pressure(self):
            return self._pressure * 0.001

        @property
        def humidity(self):
            return self._humidity * 0.01

    class acc_2g(_reading_type):
        """Accelerometer +-2G"""
        name = "ACC_2G"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class acc_4g(_reading_type):
        """Accelerometer +-4G"""
        name = "ACC_4G"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class acc_8g(_reading_type):
        """Accelerometer +-8G"""
        name = "ACC_8G"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class acc_16g(_reading_type):
        """Accelerometer +-16G"""
        name = "ACC_16G"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class gyr_125dps(_reading_type):
        """Gyroscope +-125 DPS"""
        name = "GYR_125DPS"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class gyr_250dps(_reading_type):
        """Gyroscope +-250 DPS"""
        name = "GYR_250DPS"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class gyr_500dps(_reading_type):
        """Gyroscope +-500 DPS"""
        name = "GYR_500DPS"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class gyr_1000dps(_reading_type):
        """Gyroscope +-1000 DPS"""
        name = "GYR_1000DPS"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class gyr_2000dps(_reading_type):
        """Gyroscope +-2000 DPS"""
        name = "GYR_2000DPS"
        _fields_ = [
	        ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
	        'sample': '',
        }

    class array_type(_reading_type):
        """Example array type"""
        name = "ARRAY_TYPE"
        _fields_ = [
	        ('array', ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
	        'array': '',
        }

id_type_mapping = {
    1: readings.announce,
    2: readings.battery_state,
    3: readings.environmental,
    10: readings.acc_2g,
    11: readings.acc_4g,
    12: readings.acc_8g,
    13: readings.acc_16g,
    14: readings.gyr_125dps,
    15: readings.gyr_250dps,
    16: readings.gyr_500dps,
    17: readings.gyr_1000dps,
    18: readings.gyr_2000dps,
    100: readings.array_type,
}
