#!/usr/bin/env python3

"""Autogenerated TDF decoding logic"""

import ctypes

from collections.abc import Generator

class structs:
    class _struct_type(ctypes.LittleEndianStructure):
        def iter_fields(self) -> Generator[str, ctypes._SimpleCData, str]:
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                yield f_name, val, self._postfix_[f_name]

    class tdf_struct_mcuboot_img_sem_ver(_struct_type):
        """MCUboot semantic versioning struct"""
        _fields_ = [
            ('major', ctypes.c_uint8),
            ('minor', ctypes.c_uint8),
            ('revision', ctypes.c_uint16),
            ('build_num', ctypes.c_uint32),
        ]
        _pack_ = 1
        _postfix_ = {
            'major': '',
            'minor': '',
            'revision': '',
            'build_num': '',
        }

    class tdf_struct_xyz_16bit(_struct_type):
        """Generic 3-axis sensor reading"""
        _fields_ = [
            ('x', ctypes.c_int16),
            ('y', ctypes.c_int16),
            ('z', ctypes.c_int16),
        ]
        _pack_ = 1
        _postfix_ = {
            'x': '',
            'y': '',
            'z': '',
        }

    class tdf_struct_gcs_location(_struct_type):
        """Geographic Coordinate System location"""
        _fields_ = [
            ('_latitude', ctypes.c_int32),
            ('_longitude', ctypes.c_int32),
            ('_height', ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            'latitude': 'deg',
            'longitude': 'deg',
            'height': 'm',
        }

        @property
        def latitude(self):
            return self._latitude * 1e-07

        @property
        def longitude(self):
            return self._longitude * 1e-07

        @property
        def height(self):
            return self._height * 0.001

    class tdf_struct_lte_cell_id_local(_struct_type):
        """LTE cell ID (Local)"""
        _fields_ = [
            ('eci', ctypes.c_uint32),
            ('tac', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            'eci': '',
            'tac': '',
        }

    class tdf_struct_lte_cell_id_global(_struct_type):
        """LTE cell ID (Global)"""
        _fields_ = [
            ('mcc', ctypes.c_uint16),
            ('mnc', ctypes.c_uint16),
            ('eci', ctypes.c_uint32),
            ('tac', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            'mcc': '',
            'mnc': '',
            'eci': '',
            'tac': '',
        }

class readings:
    class _reading_type(ctypes.LittleEndianStructure):
        def iter_fields(self) -> Generator[str, ctypes._SimpleCData, str]:
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                if isinstance(val, ctypes.LittleEndianStructure):
                    for subfield_name, subfield_val, subfield_postfix in val.iter_fields():
                        yield f'{f_name}.{subfield_name}', subfield_val, subfield_postfix
                elif isinstance(val, ctypes.Array):
                    yield f_name, list(val), self._postfix_[f_name]
                else:
                    yield f_name, val, self._postfix_[f_name]

    class announce(_reading_type):
        """Common announcement packet"""
        name = "ANNOUNCE"
        _fields_ = [
            ('application', ctypes.c_uint32),
            ('version', structs.tdf_struct_mcuboot_img_sem_ver),
            ('kv_crc', ctypes.c_uint32),
            ('blocks', ctypes.c_uint32),
            ('uptime', ctypes.c_uint32),
            ('reboots', ctypes.c_uint16),
            ('flags', ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            'application': '',
            'version': '',
            'kv_crc': '',
            'blocks': '',
            'uptime': '',
            'reboots': '',
            'flags': '',
        }

    class battery_state(_reading_type):
        """General battery state"""
        name = "BATTERY_STATE"
        _fields_ = [
            ('voltage_mv', ctypes.c_uint32),
            ('current_ua', ctypes.c_int32),
            ('soc', ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            'voltage_mv': 'mV',
            'current_ua': 'uA',
            'soc': '%',
        }

    class ambient_temp_pres_hum(_reading_type):
        """Ambient temperature, pressure & humidity"""
        name = "AMBIENT_TEMP_PRES_HUM"
        _fields_ = [
            ('_temperature', ctypes.c_int32),
            ('_pressure', ctypes.c_uint32),
            ('_humidity', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            'temperature': 'deg',
            'pressure': 'kPa',
            'humidity': '%',
        }

        @property
        def temperature(self):
            return self._temperature * 0.001

        @property
        def pressure(self):
            return self._pressure * 0.001

        @property
        def humidity(self):
            return self._humidity * 0.01

    class ambient_temperature(_reading_type):
        """Ambient temperature"""
        name = "AMBIENT_TEMPERATURE"
        _fields_ = [
            ('_temperature', ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            'temperature': 'deg',
        }

        @property
        def temperature(self):
            return self._temperature * 0.001

    class time_sync(_reading_type):
        """Time synchronised to new source"""
        name = "TIME_SYNC"
        _fields_ = [
            ('source', ctypes.c_uint8),
            ('_shift', ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            'source': '',
            'shift': 'us',
        }

        @property
        def shift(self):
            return self._shift * 1e-06

    class reboot_info(_reading_type):
        """Information pertaining to the previous reboot"""
        name = "REBOOT_INFO"
        _fields_ = [
            ('reason', ctypes.c_uint8),
            ('hardware_flags', ctypes.c_uint32),
            ('count', ctypes.c_uint32),
            ('uptime', ctypes.c_uint32),
            ('param_1', ctypes.c_uint32),
            ('param_2', ctypes.c_uint32),
            ('thread', 8 * ctypes.c_char),
        ]
        _pack_ = 1
        _postfix_ = {
            'reason': '',
            'hardware_flags': '',
            'count': '',
            'uptime': '',
            'param_1': '',
            'param_2': '',
            'thread': '',
        }

    class acc_2g(_reading_type):
        """Accelerometer +-2G"""
        name = "ACC_2G"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class acc_4g(_reading_type):
        """Accelerometer +-4G"""
        name = "ACC_4G"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class acc_8g(_reading_type):
        """Accelerometer +-8G"""
        name = "ACC_8G"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class acc_16g(_reading_type):
        """Accelerometer +-16G"""
        name = "ACC_16G"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gyr_125dps(_reading_type):
        """Gyroscope +-125 DPS"""
        name = "GYR_125DPS"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gyr_250dps(_reading_type):
        """Gyroscope +-250 DPS"""
        name = "GYR_250DPS"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gyr_500dps(_reading_type):
        """Gyroscope +-500 DPS"""
        name = "GYR_500DPS"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gyr_1000dps(_reading_type):
        """Gyroscope +-1000 DPS"""
        name = "GYR_1000DPS"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gyr_2000dps(_reading_type):
        """Gyroscope +-2000 DPS"""
        name = "GYR_2000DPS"
        _fields_ = [
            ('sample', structs.tdf_struct_xyz_16bit),
        ]
        _pack_ = 1
        _postfix_ = {
            'sample': '',
        }

    class gcs_wgs84_llha(_reading_type):
        """Geo-location (WGS-84) + accuracy"""
        name = "GCS_WGS84_LLHA"
        _fields_ = [
            ('location', structs.tdf_struct_gcs_location),
            ('_h_acc', ctypes.c_int32),
            ('_v_acc', ctypes.c_int32),
        ]
        _pack_ = 1
        _postfix_ = {
            'location': '',
            'h_acc': 'm',
            'v_acc': 'm',
        }

        @property
        def h_acc(self):
            return self._h_acc * 0.001

        @property
        def v_acc(self):
            return self._v_acc * 0.001

    class ubx_nav_pvt(_reading_type):
        """u-blox GNSS NAV-PVT message"""
        name = "UBX_NAV_PVT"
        _fields_ = [
            ('itow', ctypes.c_uint32),
            ('year', ctypes.c_uint16),
            ('month', ctypes.c_uint8),
            ('day', ctypes.c_uint8),
            ('hour', ctypes.c_uint8),
            ('min', ctypes.c_uint8),
            ('sec', ctypes.c_uint8),
            ('valid', ctypes.c_uint8),
            ('t_acc', ctypes.c_uint32),
            ('nano', ctypes.c_int32),
            ('fix_type', ctypes.c_uint8),
            ('flags', ctypes.c_uint8),
            ('flags2', ctypes.c_uint8),
            ('num_sv', ctypes.c_uint8),
            ('_lon', ctypes.c_int32),
            ('_lat', ctypes.c_int32),
            ('_height', ctypes.c_int32),
            ('_h_msl', ctypes.c_int32),
            ('_h_acc', ctypes.c_uint32),
            ('_v_acc', ctypes.c_uint32),
            ('_vel_n', ctypes.c_int32),
            ('_vel_e', ctypes.c_int32),
            ('_vel_d', ctypes.c_int32),
            ('_g_speed', ctypes.c_int32),
            ('_head_mot', ctypes.c_int32),
            ('_s_acc', ctypes.c_uint32),
            ('_head_acc', ctypes.c_uint32),
            ('_p_dop', ctypes.c_uint16),
            ('flags3', ctypes.c_uint16),
            ('reserved0', 4 * ctypes.c_uint8),
            ('_head_veh', ctypes.c_int32),
            ('_mag_dec', ctypes.c_int16),
            ('_mag_acc', ctypes.c_uint16),
        ]
        _pack_ = 1
        _postfix_ = {
            'itow': '',
            'year': '',
            'month': '',
            'day': '',
            'hour': '',
            'min': '',
            'sec': '',
            'valid': '',
            't_acc': 'ns',
            'nano': 'ns',
            'fix_type': '',
            'flags': '',
            'flags2': '',
            'num_sv': '',
            'lon': 'deg',
            'lat': 'deg',
            'height': 'm',
            'h_msl': 'm',
            'h_acc': 'm',
            'v_acc': 'm',
            'vel_n': 'm/s',
            'vel_e': 'm/s',
            'vel_d': 'm/s',
            'g_speed': 'm/s',
            'head_mot': 'deg',
            's_acc': 'm/s',
            'head_acc': 'deg',
            'p_dop': '',
            'flags3': '',
            'reserved0': '',
            'head_veh': 'deg',
            'mag_dec': 'deg',
            'mag_acc': 'deg',
        }

        @property
        def lon(self):
            return self._lon * 1e-07

        @property
        def lat(self):
            return self._lat * 1e-07

        @property
        def height(self):
            return self._height * 0.001

        @property
        def h_msl(self):
            return self._h_msl * 0.001

        @property
        def h_acc(self):
            return self._h_acc * 0.001

        @property
        def v_acc(self):
            return self._v_acc * 0.001

        @property
        def vel_n(self):
            return self._vel_n * 0.001

        @property
        def vel_e(self):
            return self._vel_e * 0.001

        @property
        def vel_d(self):
            return self._vel_d * 0.001

        @property
        def g_speed(self):
            return self._g_speed * 0.001

        @property
        def head_mot(self):
            return self._head_mot * 1e-05

        @property
        def s_acc(self):
            return self._s_acc * 0.001

        @property
        def head_acc(self):
            return self._head_acc * 1e-05

        @property
        def p_dop(self):
            return self._p_dop * 0.01

        @property
        def head_veh(self):
            return self._head_veh * 1e-05

        @property
        def mag_dec(self):
            return self._mag_dec * 0.01

        @property
        def mag_acc(self):
            return self._mag_acc * 0.01

    class lte_conn_status(_reading_type):
        """Information on service cell and registration status"""
        name = "LTE_CONN_STATUS"
        _fields_ = [
            ('cell', structs.tdf_struct_lte_cell_id_global),
            ('earfcn', ctypes.c_uint32),
            ('status', ctypes.c_uint8),
            ('tech', ctypes.c_uint8),
            ('_rsrp', ctypes.c_uint8),
            ('rsrq', ctypes.c_int8),
        ]
        _pack_ = 1
        _postfix_ = {
            'cell': '',
            'earfcn': '',
            'status': '',
            'tech': '',
            'rsrp': 'dBm',
            'rsrq': 'dB',
        }

        @property
        def rsrp(self):
            return self._rsrp * -1

    class array_type(_reading_type):
        """Example array type"""
        name = "ARRAY_TYPE"
        _fields_ = [
            ('array', 4 * ctypes.c_uint8),
        ]
        _pack_ = 1
        _postfix_ = {
            'array': '',
        }

id_type_mapping = {
    1: readings.announce,
    2: readings.battery_state,
    3: readings.ambient_temp_pres_hum,
    4: readings.ambient_temperature,
    5: readings.time_sync,
    6: readings.reboot_info,
    10: readings.acc_2g,
    11: readings.acc_4g,
    12: readings.acc_8g,
    13: readings.acc_16g,
    14: readings.gyr_125dps,
    15: readings.gyr_250dps,
    16: readings.gyr_500dps,
    17: readings.gyr_1000dps,
    18: readings.gyr_2000dps,
    19: readings.gcs_wgs84_llha,
    20: readings.ubx_nav_pvt,
    21: readings.lte_conn_status,
    100: readings.array_type,
}
